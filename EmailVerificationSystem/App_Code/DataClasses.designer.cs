#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DreamTool")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBranch(Branch instance);
  partial void UpdateBranch(Branch instance);
  partial void DeleteBranch(Branch instance);
  partial void InsertValidation(Validation instance);
  partial void UpdateValidation(Validation instance);
  partial void DeleteValidation(Validation instance);
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  partial void InsertEmail(Email instance);
  partial void UpdateEmail(Email instance);
  partial void DeleteEmail(Email instance);
  partial void InsertOrganization(Organization instance);
  partial void UpdateOrganization(Organization instance);
  partial void DeleteOrganization(Organization instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DreamToolConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Branch> Branches
	{
		get
		{
			return this.GetTable<Branch>();
		}
	}
	
	public System.Data.Linq.Table<Validation> Validations
	{
		get
		{
			return this.GetTable<Validation>();
		}
	}
	
	public System.Data.Linq.Table<Customer> Customers
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	public System.Data.Linq.Table<Email> Emails
	{
		get
		{
			return this.GetTable<Email>();
		}
	}
	
	public System.Data.Linq.Table<Organization> Organizations
	{
		get
		{
			return this.GetTable<Organization>();
		}
	}
	
	public System.Data.Linq.Table<View_CustomerBranchEmail> View_CustomerBranchEmails
	{
		get
		{
			return this.GetTable<View_CustomerBranchEmail>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branch")]
public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BranchId;
	
	private string _BranchName;
	
	private System.Nullable<int> _OrgId;
	
	private EntitySet<Customer> _Customers;
	
	private EntityRef<Organization> _Organization;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIdChanging(int value);
    partial void OnBranchIdChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnOrgIdChanging(System.Nullable<int> value);
    partial void OnOrgIdChanged();
    #endregion
	
	public Branch()
	{
		this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
		this._Organization = default(EntityRef<Organization>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int BranchId
	{
		get
		{
			return this._BranchId;
		}
		set
		{
			if ((this._BranchId != value))
			{
				this.OnBranchIdChanging(value);
				this.SendPropertyChanging();
				this._BranchId = value;
				this.SendPropertyChanged("BranchId");
				this.OnBranchIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(120)")]
	public string BranchName
	{
		get
		{
			return this._BranchName;
		}
		set
		{
			if ((this._BranchName != value))
			{
				this.OnBranchNameChanging(value);
				this.SendPropertyChanging();
				this._BranchName = value;
				this.SendPropertyChanged("BranchName");
				this.OnBranchNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgId", DbType="Int")]
	public System.Nullable<int> OrgId
	{
		get
		{
			return this._OrgId;
		}
		set
		{
			if ((this._OrgId != value))
			{
				if (this._Organization.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrgIdChanging(value);
				this.SendPropertyChanging();
				this._OrgId = value;
				this.SendPropertyChanged("OrgId");
				this.OnOrgIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Customer", Storage="_Customers", ThisKey="BranchId", OtherKey="BranchId")]
	public EntitySet<Customer> Customers
	{
		get
		{
			return this._Customers;
		}
		set
		{
			this._Customers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Branch", Storage="_Organization", ThisKey="OrgId", OtherKey="OrgId", IsForeignKey=true)]
	public Organization Organization
	{
		get
		{
			return this._Organization.Entity;
		}
		set
		{
			Organization previousValue = this._Organization.Entity;
			if (((previousValue != value) 
						|| (this._Organization.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Organization.Entity = null;
					previousValue.Branches.Remove(this);
				}
				this._Organization.Entity = value;
				if ((value != null))
				{
					value.Branches.Add(this);
					this._OrgId = value.OrgId;
				}
				else
				{
					this._OrgId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Organization");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Branch = this;
	}
	
	private void detach_Customers(Customer entity)
	{
		this.SendPropertyChanging();
		entity.Branch = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Validation")]
public partial class Validation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ValidId;
	
	private System.Nullable<System.DateTime> _DateSent;
	
	private System.Nullable<int> _Delivered;
	
	private System.Nullable<int> _Opened;
	
	private System.Nullable<int> _EmalId;
	
	private EntityRef<Email> _Email;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValidIdChanging(int value);
    partial void OnValidIdChanged();
    partial void OnDateSentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSentChanged();
    partial void OnDeliveredChanging(System.Nullable<int> value);
    partial void OnDeliveredChanged();
    partial void OnOpenedChanging(System.Nullable<int> value);
    partial void OnOpenedChanged();
    partial void OnEmalIdChanging(System.Nullable<int> value);
    partial void OnEmalIdChanged();
    #endregion
	
	public Validation()
	{
		this._Email = default(EntityRef<Email>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ValidId
	{
		get
		{
			return this._ValidId;
		}
		set
		{
			if ((this._ValidId != value))
			{
				this.OnValidIdChanging(value);
				this.SendPropertyChanging();
				this._ValidId = value;
				this.SendPropertyChanged("ValidId");
				this.OnValidIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSent", DbType="Date")]
	public System.Nullable<System.DateTime> DateSent
	{
		get
		{
			return this._DateSent;
		}
		set
		{
			if ((this._DateSent != value))
			{
				this.OnDateSentChanging(value);
				this.SendPropertyChanging();
				this._DateSent = value;
				this.SendPropertyChanged("DateSent");
				this.OnDateSentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivered", DbType="Int")]
	public System.Nullable<int> Delivered
	{
		get
		{
			return this._Delivered;
		}
		set
		{
			if ((this._Delivered != value))
			{
				this.OnDeliveredChanging(value);
				this.SendPropertyChanging();
				this._Delivered = value;
				this.SendPropertyChanged("Delivered");
				this.OnDeliveredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Opened", DbType="Int")]
	public System.Nullable<int> Opened
	{
		get
		{
			return this._Opened;
		}
		set
		{
			if ((this._Opened != value))
			{
				this.OnOpenedChanging(value);
				this.SendPropertyChanging();
				this._Opened = value;
				this.SendPropertyChanged("Opened");
				this.OnOpenedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmalId", DbType="Int")]
	public System.Nullable<int> EmalId
	{
		get
		{
			return this._EmalId;
		}
		set
		{
			if ((this._EmalId != value))
			{
				if (this._Email.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmalIdChanging(value);
				this.SendPropertyChanging();
				this._EmalId = value;
				this.SendPropertyChanged("EmalId");
				this.OnEmalIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Email_Validation", Storage="_Email", ThisKey="EmalId", OtherKey="EmailId", IsForeignKey=true)]
	public Email Email
	{
		get
		{
			return this._Email.Entity;
		}
		set
		{
			Email previousValue = this._Email.Entity;
			if (((previousValue != value) 
						|| (this._Email.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Email.Entity = null;
					previousValue.Validations.Remove(this);
				}
				this._Email.Entity = value;
				if ((value != null))
				{
					value.Validations.Add(this);
					this._EmalId = value.EmailId;
				}
				else
				{
					this._EmalId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Email");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CustomerId;
	
	private string _Fname;
	
	private string _Lname;
	
	private System.Nullable<int> _BranchId;
	
	private EntitySet<Email> _Emails;
	
	private EntityRef<Branch> _Branch;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnFnameChanging(string value);
    partial void OnFnameChanged();
    partial void OnLnameChanging(string value);
    partial void OnLnameChanged();
    partial void OnBranchIdChanging(System.Nullable<int> value);
    partial void OnBranchIdChanged();
    #endregion
	
	public Customer()
	{
		this._Emails = new EntitySet<Email>(new Action<Email>(this.attach_Emails), new Action<Email>(this.detach_Emails));
		this._Branch = default(EntityRef<Branch>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CustomerId
	{
		get
		{
			return this._CustomerId;
		}
		set
		{
			if ((this._CustomerId != value))
			{
				this.OnCustomerIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerId = value;
				this.SendPropertyChanged("CustomerId");
				this.OnCustomerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fname", DbType="VarChar(120)")]
	public string Fname
	{
		get
		{
			return this._Fname;
		}
		set
		{
			if ((this._Fname != value))
			{
				this.OnFnameChanging(value);
				this.SendPropertyChanging();
				this._Fname = value;
				this.SendPropertyChanged("Fname");
				this.OnFnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lname", DbType="VarChar(120)")]
	public string Lname
	{
		get
		{
			return this._Lname;
		}
		set
		{
			if ((this._Lname != value))
			{
				this.OnLnameChanging(value);
				this.SendPropertyChanging();
				this._Lname = value;
				this.SendPropertyChanged("Lname");
				this.OnLnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="Int")]
	public System.Nullable<int> BranchId
	{
		get
		{
			return this._BranchId;
		}
		set
		{
			if ((this._BranchId != value))
			{
				if (this._Branch.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBranchIdChanging(value);
				this.SendPropertyChanging();
				this._BranchId = value;
				this.SendPropertyChanged("BranchId");
				this.OnBranchIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Email", Storage="_Emails", ThisKey="CustomerId", OtherKey="CustomerId")]
	public EntitySet<Email> Emails
	{
		get
		{
			return this._Emails;
		}
		set
		{
			this._Emails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_Customer", Storage="_Branch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
	public Branch Branch
	{
		get
		{
			return this._Branch.Entity;
		}
		set
		{
			Branch previousValue = this._Branch.Entity;
			if (((previousValue != value) 
						|| (this._Branch.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Branch.Entity = null;
					previousValue.Customers.Remove(this);
				}
				this._Branch.Entity = value;
				if ((value != null))
				{
					value.Customers.Add(this);
					this._BranchId = value.BranchId;
				}
				else
				{
					this._BranchId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Branch");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Emails(Email entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_Emails(Email entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Email")]
public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EmailId;
	
	private string _Address;
	
	private System.Nullable<int> _CustomerId;
	
	private EntitySet<Validation> _Validations;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailIdChanging(int value);
    partial void OnEmailIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    #endregion
	
	public Email()
	{
		this._Validations = new EntitySet<Validation>(new Action<Validation>(this.attach_Validations), new Action<Validation>(this.detach_Validations));
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EmailId
	{
		get
		{
			return this._EmailId;
		}
		set
		{
			if ((this._EmailId != value))
			{
				this.OnEmailIdChanging(value);
				this.SendPropertyChanging();
				this._EmailId = value;
				this.SendPropertyChanged("EmailId");
				this.OnEmailIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(120)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
	public System.Nullable<int> CustomerId
	{
		get
		{
			return this._CustomerId;
		}
		set
		{
			if ((this._CustomerId != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIdChanging(value);
				this.SendPropertyChanging();
				this._CustomerId = value;
				this.SendPropertyChanged("CustomerId");
				this.OnCustomerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Email_Validation", Storage="_Validations", ThisKey="EmailId", OtherKey="EmalId")]
	public EntitySet<Validation> Validations
	{
		get
		{
			return this._Validations;
		}
		set
		{
			this._Validations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Email", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.Emails.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.Emails.Add(this);
					this._CustomerId = value.CustomerId;
				}
				else
				{
					this._CustomerId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Validations(Validation entity)
	{
		this.SendPropertyChanging();
		entity.Email = this;
	}
	
	private void detach_Validations(Validation entity)
	{
		this.SendPropertyChanging();
		entity.Email = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrgId;
	
	private string _OrgName;
	
	private EntitySet<Branch> _Branches;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIdChanging(int value);
    partial void OnOrgIdChanged();
    partial void OnOrgNameChanging(string value);
    partial void OnOrgNameChanged();
    #endregion
	
	public Organization()
	{
		this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrgId
	{
		get
		{
			return this._OrgId;
		}
		set
		{
			if ((this._OrgId != value))
			{
				this.OnOrgIdChanging(value);
				this.SendPropertyChanging();
				this._OrgId = value;
				this.SendPropertyChanged("OrgId");
				this.OnOrgIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgName", DbType="VarChar(120)")]
	public string OrgName
	{
		get
		{
			return this._OrgName;
		}
		set
		{
			if ((this._OrgName != value))
			{
				this.OnOrgNameChanging(value);
				this.SendPropertyChanging();
				this._OrgName = value;
				this.SendPropertyChanged("OrgName");
				this.OnOrgNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Branch", Storage="_Branches", ThisKey="OrgId", OtherKey="OrgId")]
	public EntitySet<Branch> Branches
	{
		get
		{
			return this._Branches;
		}
		set
		{
			this._Branches.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Branches(Branch entity)
	{
		this.SendPropertyChanging();
		entity.Organization = this;
	}
	
	private void detach_Branches(Branch entity)
	{
		this.SendPropertyChanging();
		entity.Organization = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_CustomerBranchEmail")]
public partial class View_CustomerBranchEmail
{
	
	private string _Fname;
	
	private string _Lname;
	
	private string _BranchName;
	
	private string _Address;
	
	public View_CustomerBranchEmail()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fname", DbType="VarChar(120)")]
	public string Fname
	{
		get
		{
			return this._Fname;
		}
		set
		{
			if ((this._Fname != value))
			{
				this._Fname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lname", DbType="VarChar(120)")]
	public string Lname
	{
		get
		{
			return this._Lname;
		}
		set
		{
			if ((this._Lname != value))
			{
				this._Lname = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(120)")]
	public string BranchName
	{
		get
		{
			return this._BranchName;
		}
		set
		{
			if ((this._BranchName != value))
			{
				this._BranchName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(120)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this._Address = value;
			}
		}
	}
}
#pragma warning restore 1591
